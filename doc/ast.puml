@startuml

hide empty fields
hide empty methods
set namespaceSeparator ::
skinparam linetype polyline

namespace comp::ast {

class ArrayDataType << (S,#ffbb33) >> extends DataType {
  +const std::shared_ptr<DataType> item_type
  +const std::shared_ptr<RExpression> size
  {static} +std::unique_ptr<ArrayDataType> Create()
}

class ArrayDeclarator << (S,#ffbb33) >>  extends Declarator {
  +const std::shared_ptr<RExpression> size
  {static} +std::unique_ptr<ArrayDeclarator> Create()
}

class AssignmentExpression << (S,#ffbb33) >>  extends RExpression {
  +AssignmentOperator op
  +LExpression lvalue
  +RExpression lvalue
  {static} +std::unique_ptr<AssignmentExpression> Create()
}

enum AssignmentOperator {
  Addition
  BitwiseAnd
  BitwiseOr
  BitwiseXor
  Division
  LeftShift
  Multiplication
  Remainder
  RightShift
  Simple
  Subtraction
}

class BinaryExpression << (S,#ffbb33) >>  extends RExpression {
  +const BinaryOperator op
  +const std::shared_ptr<RExpression> left
  +const std::shared_ptr<RExpression> right
  {static} +std::unique_ptr<BinaryExpression> Create()
}

enum BinaryOperator {
  Addition
  BitwiseAnd
  BitwiseOr
  BitwiseXor
  Comma
  Division
  Equality
  GreaterThan,
  GreaterThanOrEqual
  Inequality
  LeftShift
  LessThan
  LessThanOrEqualTo
  LogicalAnd
  LogicalOr
  Multiplication
  Remainder
  RightShift
  Subtraction
}

class BlockStatement << (S,#ffbb33) >>  extends Statement {
  +const std::vector<std::shared_ptr<Statement>> body
  {static} +std::unique_ptr<BlockStatement> Create()
}

class CallExpression << (S,#ffbb33) >>  extends RExpression {
  +const std::shared_ptr<RExpression> callee
  +std::vector<std::shared_ptr<RExpression>> arguments
  {static} +std::unique_ptr<CallExpression> Create()
}

abstract class DataType extends Node {
}

abstract class Declaration extends Statement {
}

abstract class Declarator extends Node {
}

class ForStatement << (S,#ffbb33) >>  extends Statement {
  +const std::shared_ptr<Statement> initialization
  +const std::shared_ptr<Statement> condition
  +const std::shared_ptr<Statement> iteration
  +const std::shared_ptr<Statement> body
  {static} +std::unique_ptr<ForStatement> Create()
}

class Function << (S,#ffbb33) >>  extends Declaration {
  +const std::shared_ptr<Identifier> identifier
  +const std::vector<std::shared_ptr<Parameter>> parameters
  +const std::shared_ptr<DataType> return_type
  +const std::shared_ptr<BlockStatement> body
  {static} +std::unique_ptr<Function> Create()
}

class Identifier << (S,#ffbb33) >>  extends LExpression {
  +const std::string name
  {static} +std::unique_ptr<Identifier> Create()
}

class IdentifierDeclarator << (S,#ffbb33) >>  extends Declarator {
  +const std::shared_ptr<Identifier> identifier
  {static} +std::unique_ptr<IdentifierDeclarator> Create()
}

class IfStatement << (S,#ffbb33) >>  extends Statement {
  +const std::shared_ptr<RExpression> test
  +const std::shared_ptr<Statement> consequence
  +const std::shared_ptr<Statement> alternative
  {static} +std::unique_ptr<IfStatement> Create()
}

class Int64Literal << (S,#ffbb33) >>  extends Literal {
  +const int64_t value
  {static} +std::unique_ptr<Int64Literal> Create()
}

abstract class LExpression extends RExpression {
}

abstract class Literal extends RExpression {
}

class LiteralDataType << (S,#ffbb33) >>  extends DataType {
  +const std::shared_ptr<Identifier> identifier
  {static} +std::unique_ptr<LiteralDataType> Create()
}

abstract class Node {
  +const Type node_type
  +const std::shared_ptr<SourceLocation> location
}

enum comp::ast::Node::Type {
  AnonymousParameter
  ArrayDataType
  ArrayDeclarator
  AssignmentExpression
  BinaryExpression
  BlockStatement
  CallExpression
  ExpressionStatement
  ForStatement
  Function
  Identifier
  IdentifierDeclarator
  IfStatement
  Int64Literal
  LiteralDataType
  NamedParameter
  NullStatement
  Program
  ReturnStatement,
  SubscriptExpression
  Uint8Literal
  UnaryExpression
  VariableDeclaration
  VariableDeclarator
  WhileStatement
}

class NullStatement << (S,#ffbb33) >> extends Statement {
  {static} +std::unique_ptr<NullStatement> Create()
}

abstract class Parameter extends Node {
}

class NamedParameter << (S,#ffbb33) >> extends Parameter {
  +const std::shared_ptr<LiteralDataType> data_type
  +const std::shared_ptr<Declarator> declarator
  {static} +std::unique_ptr<Parameter> Create()
}

class AnonymousParameter << (S,#ffbb33) >> extends Parameter {
  +const std::shared_ptr<DataType> data_type
  {static} +std::unique_ptr<Parameter> Create()
}

class Position << (S,#ffbb33) >> {
  +const size_t index
  +const size_t line
  +const size_t column
}

class Program << (S,#ffbb33) >> extends Node {
  +const std::vector<std::shared_ptr<Declaration>> body
  {static} +std::unique_ptr<Program> Create()
}

class ReturnStatement << (S,#ffbb33) >> extends Statement {
  +const std::shared_ptr<RExpression> expression
  {static} +std::unique_ptr<ReturnStatement> Create()
}

abstract class RExpression extends Node {
}

class SourceLocation << (S,#ffbb33) >> {
  +const Position start
  +const Position end
}

abstract class Statement extends Node {
}

class SubscriptExpression << (S,#ffbb33) >> extends LExpression {
  +const std::shared_ptr<RExpression> array
  +const std::shared_ptr<RExpression> index
  {static} +std::unique_ptr<SubscriptExpression> Create()
}

class Uint8Literal << (S,#ffbb33) >> extends Literal {
  +const uint8_t value
  {static} +std::unique_ptr<Uint8Literal> Create()
}

class UnaryExpression << (S,#ffbb33) >> extends RExpression {
  +const UnaryOperator op
  +const std::shared_ptr<RExpression> expression
  {static} +std::unique_ptr<UnaryExpression> Create()
}

enum UnaryOperator {
  Address
  BitwiseComplement
  Indirection
  LogicalNegation
  PostfixDecrement
  PostfixIncrement
  PrefixDecrement
  PrefixIncrement
  UnaryMinus
  UnaryPlus
}

class VariableDeclaration << (S,#ffbb33) >> extends Declaration {
  +const std::shared_ptr<DataType> data_type
  +const std::vector<std::shared_ptr<VariableDeclarator>> declarators
  {static} +std::unique_ptr<VariableDeclaration> Create()
}

class VariableDeclarator << (S,#ffbb33) >> extends Node {
  +const std::shared_ptr<Declarator> declarator
  +const std::shared_ptr<RExpression> initial_value
  {static} +std::unique_ptr<VariableDeclarator> Create()
}

class WhileStatement << (S,#ffbb33) >> extends Statement {
  +const std::shared_ptr<RExpression> condition
  +const std::shared_ptr<Statement> body
  {static} +std::unique_ptr<WhileStatement> Create()
}

DataType -[hidden]down- Declarator
RExpression -[hidden]up- DataType
Statement -[hidden]down- DataType
VariableDeclarator -[hidden]right- Statement
CallExpression -[hidden]right- Literal
}

@enduml
